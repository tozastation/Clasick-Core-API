// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tozastation.clasick.loginservice.grpc.login_service

@SerialVersionUID(0L)
final case class ResponseSignUp(
    accessToken: _root_.scala.Predef.String = "",
    result: tozastation.clasick.loginservice.grpc.login_service.Result = tozastation.clasick.loginservice.grpc.login_service.Result.SUCCESS
    ) extends scalapb.GeneratedMessage with scalapb.Message[ResponseSignUp] with scalapb.lenses.Updatable[ResponseSignUp] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = accessToken
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = result
        if (__value != tozastation.clasick.loginservice.grpc.login_service.Result.SUCCESS) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = accessToken
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = result
        if (__v != tozastation.clasick.loginservice.grpc.login_service.Result.SUCCESS) {
          _output__.writeEnum(2, __v.value)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp = {
      var __accessToken = this.accessToken
      var __result = this.result
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __accessToken = _input__.readString()
          case 16 =>
            __result = tozastation.clasick.loginservice.grpc.login_service.Result.fromValue(_input__.readEnum())
          case tag => _input__.skipField(tag)
        }
      }
      tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp(
          accessToken = __accessToken,
          result = __result
      )
    }
    def withAccessToken(__v: _root_.scala.Predef.String): ResponseSignUp = copy(accessToken = __v)
    def withResult(__v: tozastation.clasick.loginservice.grpc.login_service.Result): ResponseSignUp = copy(result = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = accessToken
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = result.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(accessToken)
        case 2 => _root_.scalapb.descriptors.PEnum(result.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp
}

object ResponseSignUp extends scalapb.GeneratedMessageCompanion[tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp] with scalapb.JavaProtoSupport[tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp, tozastation.clasick.loginservice.grpc.ResponseSignUp] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp] with scalapb.JavaProtoSupport[tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp, tozastation.clasick.loginservice.grpc.ResponseSignUp] = this
  def toJavaProto(scalaPbSource: tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp): tozastation.clasick.loginservice.grpc.ResponseSignUp = {
    val javaPbOut = tozastation.clasick.loginservice.grpc.ResponseSignUp.newBuilder
    javaPbOut.setAccessToken(scalaPbSource.accessToken)
    javaPbOut.setResultValue(scalaPbSource.result.value)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: tozastation.clasick.loginservice.grpc.ResponseSignUp): tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp = tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp(
    accessToken = javaPbSource.getAccessToken,
    result = tozastation.clasick.loginservice.grpc.login_service.Result.fromValue(javaPbSource.getResultValue.intValue)
  )
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      tozastation.clasick.loginservice.grpc.login_service.Result.fromValue(__fieldsMap.getOrElse(__fields.get(1), tozastation.clasick.loginservice.grpc.login_service.Result.SUCCESS.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        tozastation.clasick.loginservice.grpc.login_service.Result.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(tozastation.clasick.loginservice.grpc.login_service.Result.SUCCESS.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = LoginServiceProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = LoginServiceProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => tozastation.clasick.loginservice.grpc.login_service.Result
    }
  }
  lazy val defaultInstance = tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp(
  )
  implicit class ResponseSignUpLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp](_l) {
    def accessToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.accessToken)((c_, f_) => c_.copy(accessToken = f_))
    def result: _root_.scalapb.lenses.Lens[UpperPB, tozastation.clasick.loginservice.grpc.login_service.Result] = field(_.result)((c_, f_) => c_.copy(result = f_))
  }
  final val ACCESS_TOKEN_FIELD_NUMBER = 1
  final val RESULT_FIELD_NUMBER = 2
  def of(
    accessToken: _root_.scala.Predef.String,
    result: tozastation.clasick.loginservice.grpc.login_service.Result
  ): _root_.tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp = _root_.tozastation.clasick.loginservice.grpc.login_service.ResponseSignUp(
    accessToken,
    result
  )
}
