// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.tozastation.clasickcoreapi.grpc.user_rpc

/** *
  * rpc : SignUp
  */
@SerialVersionUID(0L)
final case class RequestSignUp(
    name: _root_.scala.Predef.String = "",
    password: _root_.scala.Predef.String = "",
    contact: _root_.scala.Option[com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[RequestSignUp] with scalapb.lenses.Updatable[RequestSignUp] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = password
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      if (contact.isDefined) {
        val __value = contact.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = password
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      contact.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp = {
      var __name = this.name
      var __password = this.password
      var __contact = this.contact
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 18 =>
            __password = _input__.readString()
          case 26 =>
            __contact = Option(_root_.scalapb.LiteParser.readMessage(_input__, __contact.getOrElse(com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp(
          name = __name,
          password = __password,
          contact = __contact
      )
    }
    def withName(__v: _root_.scala.Predef.String): RequestSignUp = copy(name = __v)
    def withPassword(__v: _root_.scala.Predef.String): RequestSignUp = copy(password = __v)
    def getContact: com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact = contact.getOrElse(com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact.defaultInstance)
    def clearContact: RequestSignUp = copy(contact = _root_.scala.None)
    def withContact(__v: com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact): RequestSignUp = copy(contact = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = password
          if (__t != "") __t else null
        }
        case 3 => contact.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(password)
        case 3 => contact.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp
}

object RequestSignUp extends scalapb.GeneratedMessageCompanion[com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp] with scalapb.JavaProtoSupport[com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp, com.github.tozastation.clasickcoreapi.grpc.RequestSignUp] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp] with scalapb.JavaProtoSupport[com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp, com.github.tozastation.clasickcoreapi.grpc.RequestSignUp] = this
  def toJavaProto(scalaPbSource: com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp): com.github.tozastation.clasickcoreapi.grpc.RequestSignUp = {
    val javaPbOut = com.github.tozastation.clasickcoreapi.grpc.RequestSignUp.newBuilder
    javaPbOut.setName(scalaPbSource.name)
    javaPbOut.setPassword(scalaPbSource.password)
    scalaPbSource.contact.map(com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact.toJavaProto).foreach(javaPbOut.setContact)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: com.github.tozastation.clasickcoreapi.grpc.RequestSignUp): com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp = com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp(
    name = javaPbSource.getName,
    password = javaPbSource.getPassword,
    contact = if (javaPbSource.hasContact) Some(com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact.fromJavaProto(javaPbSource.getContact)) else _root_.scala.None
  )
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserRpcProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserRpcProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp(
  )
  implicit class RequestSignUpLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def password: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.password)((c_, f_) => c_.copy(password = f_))
    def contact: _root_.scalapb.lenses.Lens[UpperPB, com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact] = field(_.getContact)((c_, f_) => c_.copy(contact = Option(f_)))
    def optionalContact: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact]] = field(_.contact)((c_, f_) => c_.copy(contact = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val PASSWORD_FIELD_NUMBER = 2
  final val CONTACT_FIELD_NUMBER = 3
  def of(
    name: _root_.scala.Predef.String,
    password: _root_.scala.Predef.String,
    contact: _root_.scala.Option[com.github.tozastation.clasickcoreapi.grpc.user_rpc.Contact]
  ): _root_.com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp = _root_.com.github.tozastation.clasickcoreapi.grpc.user_rpc.RequestSignUp(
    name,
    password,
    contact
  )
}
